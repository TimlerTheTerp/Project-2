Potentially helpful things

# Andy Nguyen
def display_note_window(self, note_text):
    note_window = tk.Toplevel(self)
    note_window.title("Note")
    note_label = tk.Label(note_window, text=note_text, wraplength=500)
    note_label.pack(padx=10, pady=10)

# Andy Nguyen
# Save as a text file here
with open ("notes1.txt", "w") as f:
    for note in notes: 
        f.write(f"{note['title']}\n{note['text']}\n{note['meta']}\n") 
        
# Read in your text file here
new_notes = []
with open("notes1.txt","r") as f:
    lines = f.readlines()
    for i in range(0, len(lines), 3):
        title = lines[i].strip()
        text = lines[i+1].strip()
        meta = lines[i+2].strip()
        new_notes.append({'title':title, 'text':text, 'meta':meta})

# Save as a CSV file here
with open("notes1.csv", "w", newline='') as csvfile:
    fieldnames = ['titles', 'text', 'meta']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for note in notes:
        writer.writerow(note)

# Read in your CSV file here
new_notes_csv = []
with open("notes1.csv", "r", newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        print(row)
        new_notes_csv.append(row)
    print(new_notes_csv)

# Save your JSON file here
with open("notes1.json", "w") as jsonfile:
    json.dump(notes, jsonfile)
    
# Read your JSON file here
with open("notes1.json", "r") as jsonfile:
    new_notes_json = json.load(jsonfile)

# Nolan Peterson

# Open a file
f = open('filename.txt')
  
# Read from a file
f = open('filename.txt', 'r')
  
# To read the whole file
print(f.read())
  
# To read single line
print(f.readline())
  
# Write to a file
f = open('filename.txt', 'w')
f.write('Writing into a file \n')
  

# Myles Rush
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass
    @abstractmethod
    def perimeter(self):
        pass
        
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width
    def perimeter(self):
        return 2 * (self.length + self.width)

# Creating an instance of Rectangle
rectangle = Rectangle(5, 3)

# Using abstract methods
print("Area:", rectangle.area())
print("Perimeter:", rectangle.perimeter())
